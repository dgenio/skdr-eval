name: Release

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools_scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm

    - name: Verify git state for clean versioning
      run: |
        echo "Current git status:"
        git status --porcelain
        echo "Current git describe:"
        git describe --tags --long --dirty
        echo "Expected setuptools-scm version:"
        python -c "import setuptools_scm; print(setuptools_scm.get_version())"

    - name: Clean working directory for setuptools-scm
      run: |
        # Reset any modified files to ensure clean state
        git reset --hard HEAD
        # Verify clean state
        git status --porcelain
        echo "Clean git describe:"
        git describe --tags --long --dirty

    - name: Build package
      run: |
        python -m build

    - name: Verify built version matches tag
      run: |
        # Extract version from built package
        BUILT_VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
        # Extract tag version (remove 'v' prefix if present)
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        TAG_VERSION=${TAG_VERSION#v}

        echo "Built version: $BUILT_VERSION"
        echo "Tag version: $TAG_VERSION"

        # Check if versions match
        if [ "$BUILT_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ ERROR: Built version ($BUILT_VERSION) does not match tag version ($TAG_VERSION)"
          echo "This indicates a setuptools-scm configuration issue."
          ls -la dist/
          exit 1
        else
          echo "✅ Version verification passed: $BUILT_VERSION"
        fi

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI (Trusted Publishing)
      id: pypi-publish
      continue-on-error: true
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true

    - name: Fallback - Manual PyPI publish instructions
      if: steps.pypi-publish.outcome == 'failure'
      run: |
        echo "❌ Trusted Publishing failed. Manual upload required."
        echo ""
        echo "To publish manually:"
        echo "1. Download the build artifacts from this workflow"
        echo "2. Set up your PyPI API token: https://pypi.org/manage/account/token/"
        echo "3. Run: pip install twine"
        echo "4. Run: twine upload dist/*"
        echo ""
        echo "For Trusted Publishing setup:"
        echo "1. Go to https://pypi.org/manage/project/skdr-eval/settings/publishing/"
        echo "2. Add this GitHub repository as a trusted publisher"
        echo "3. Set environment name to 'release'"
        echo "4. Set workflow filename to 'release.yml'"
        echo ""
        exit 1

    - name: Upload build artifacts (for manual fallback)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.run_number }}
        path: dist/
